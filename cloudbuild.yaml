steps:
  # Step 1: Install dependencies and store them in a shared volume
  - name: python:3.12
    id: "install-dependencies"
    volumes:
      - name: "venv"
        path: "/workspace/venv"
    entrypoint: bash
    args:
      - "-c"
      - |
        python -m venv /workspace/venv
        /workspace/venv/bin/pip install -r requirements.txt

  # Step 2: Run Tests
  - name: "python:3.12"
    id: "run-tests"
    volumes:
      - name: "venv"
        path: "/workspace/venv"
    entrypoint: bash
    args:
      - "-c"
      - |
        echo "Running tests..."
        /workspace/venv/bin/python -m pytest tests/ || exit 1  # Stop build if tests fail

  # Step 3: Run the application (reusing installed dependencies)
  - name: python:3.12
    id: "execute-training"
    volumes:
      - name: "venv"
        path: "/workspace/venv"
    entrypoint: bash
    args:
      - "-c"
      - |
        /workspace/venv/bin/python src/main.py

  # Step 4: Build the Docker image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build Docker Image'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/$PROJECT_ID/app-image'
      - '-f'
      - 'Dockerfile'
      - '.'

  # Step 5: Push the Docker image to Google Container Registry (GCR)
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push Docker Image to GCR'
    args:
      - 'push'
      - 'gcr.io/$PROJECT_ID/app-image'

  # Step 6: Deploy App Image to Cloud Run (Only this service runs continuously)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Deploy to Cloud Run'
    args:
      - 'run'
      - 'deploy'
      - 'my-mlflow-app'
      - '--image'
      - 'gcr.io/$PROJECT_ID/app-image'
      - '--platform'
      - 'managed'
      - '--region'
      - 'us-west1'
      - '--allow-unauthenticated'
      - '--memory'
      - '1Gi'

options:
  logging: CLOUD_LOGGING_ONLY
