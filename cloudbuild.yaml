steps:

  # Step 1: Fetch the OLD active revision (before deploying a new version)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Fetch Old Revision'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud run revisions list \
          --service=my-mlflow-app \
          --region=us-west1 \
          --filter="status.conditions.type:Active" \
          --format="value(metadata.name)" \
          --sort-by="~createTime" > /workspace/active_revisions.txt

        echo "Checking active revisions..."
        cat /workspace/active_revisions.txt

        # Count active revisions
        if [ "$(wc -l < /workspace/active_revisions.txt)" -gt 1 ]; then
          echo "❌ ERROR: More than one active revision found!"
          exit 1  # Stop the build process
        fi

        # Store the single active revision for later use
        cat /workspace/active_revisions.txt > /workspace/old_revision.txt
        echo "✅ Old active revision: $(cat /workspace/old_revision.txt)"

   # Step 2: Run Tests
  - name: "python:3.12"
    id: "run-tests"
    entrypoint: "sh"
    args:
      - "-c"
      - |
        python -m pip install --upgrade pip
        pip install -r requirements-local.txt
        echo "Running tests..."
        python -m pytest tests/ || exit 1  # Stop build if tests fail

  # Step 3: Build the Docker image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build Docker Image'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/carbon-relic-439014-t0/my-mlflow-app'
      - '.'

  # Step 4: Push the Docker image to Google Container Registry (GCR)
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push Docker Image to GCR'
    args:
      - 'push'
      - 'gcr.io/carbon-relic-439014-t0/my-mlflow-app'

  # Step 5: Deploy to Google Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Deploy to Cloud Run'
    args:
      - 'run'
      - 'deploy'
      - 'my-mlflow-app'
      - '--image'
      - 'gcr.io/carbon-relic-439014-t0/my-mlflow-app'
      - '--platform'
      - 'managed'
      - '--region'
      - 'us-west1'
      - '--allow-unauthenticated'
      - '--memory'
      - '2Gi'
      - '--no-traffic'

  # Step 6: Fetch the NEW revision (latest created revision)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Fetch New Revision'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud run revisions list \
          --service=my-mlflow-app \
          --region=us-west1 \
          --format="value(metadata.name)" \
          --sort-by="~createTime" | head -n1 > /workspace/new_revision.txt
        echo "New revision: $(cat /workspace/new_revision.txt)"


# Step 7: Assign 80% traffic to the OLD revision and 20% to the NEW revision
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Set Traffic Split'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Routing traffic: $(cat /workspace/old_revision.txt)=80%, $(cat /workspace/new_revision.txt)=20%"
        gcloud run services update-traffic my-mlflow-app \
          --region us-west1 \
          --to-revisions="$(cat /workspace/old_revision.txt)=80,$(cat /workspace/new_revision.txt)=20"
options:
  logging: CLOUD_LOGGING_ONLY
timeout: 1200s