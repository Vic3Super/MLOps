steps:
   # Step 1: Run Tests
  - name: "python:3.12"
    id: "run-tests"
    entrypoint: "sh"
    args:
      - "-c"
      - |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        echo "Running tests..."
        python -m pytest tests/ || exit 1  # Stop build if tests fail

  # Step 2: Build the Training Docker Image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build Training Image'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/$PROJECT_ID/training-image'
      - '-f'
      - 'Dockerfile-training'
      - '.'

  # Step 3: Push Training Image to Google Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push Training Image'
    args:
      - 'push'
      - 'gcr.io/$PROJECT_ID/training-image'

  # Step 4: Create a Cloud Run Job (Only Needs to be Done Once)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Create Cloud Run Job'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'jobs'
      - 'create'
      - 'training-job'
      - '--image'
      - 'gcr.io/$PROJECT_ID/training-image'
      - '--region'
      - 'us-central1'
      - '--task-timeout'
      - '1800s'  # 30 minutes max runtime
      - '--memory'
      - '2Gi'
      - '--cpu'
      - '2'
      - '--max-retries'
      - '1'

  # Step 5: Execute the Training Job and Wait for Completion (With Timeout)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Run Training Job'
    entrypoint: 'sh'
    args:
      - "-c"
      - |
        echo "Executing Cloud Run Job..."
        echo "Fetching latest execution ID..."
        
        gcloud run jobs execute training-job --region=us-central1
        
        echo "Waiting for job execution to complete..."
        
        MAX_WAIT_TIME=1800  # 30 minutes timeout (in seconds)
        START_TIME=$(date +%s)

        while true; do
          JOB_STATUS=$(gcloud run jobs executions list --region=us-central1 --format='value(status.state)' --limit=1)
          echo "Current status: $JOB_STATUS"

          # Check if job completed successfully
          if [ "$JOB_STATUS" = "SUCCEEDED" ]; then
            echo "✅ Training job completed successfully."
            break
          elif [ "$JOB_STATUS" = "FAILED" ] || [ "$JOB_STATUS" = "CANCELLED" ]; then
            echo "❌ Training job failed!"
            exit 1
          fi

          # Check timeout condition
          CURRENT_TIME=$(date +%s)
          ELAPSED_TIME=$((CURRENT_TIME - START_TIME))

          if [ "$ELAPSED_TIME" -ge "$MAX_WAIT_TIME" ]; then
            echo "⏳ Timeout reached! Job took longer than $MAX_WAIT_TIME seconds."
            echo "❌ Failing the build..."
            exit 1
          fi

          sleep 10  # Wait 10 seconds before checking again
        done
  # Step 6: Build App Docker Image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build App Image'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/$PROJECT_ID/app-image'
      - '-f'
      - 'Dockerfile-app'
      - '.'

  # Step 7: Push App Image to Google Container Registry (GCR)
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push App Image to GCR'
    args:
      - 'push'
      - 'gcr.io/$PROJECT_ID/app-image'

  # Step 8: Deploy App Image to Cloud Run (Only this service runs continuously)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Deploy to Cloud Run'
    args:
      - 'run'
      - 'deploy'
      - 'my-mlflow-app'
      - '--image'
      - 'gcr.io/$PROJECT_ID/app-image'
      - '--platform'
      - 'managed'
      - '--region'
      - 'us-west1'
      - '--allow-unauthenticated'
      - '--memory'
      - '1Gi'
      - '--set-env-vars'
      - 'MODEL_TYPE=champion'

options:
  logging: CLOUD_LOGGING_ONLY
