steps:
   # Step 1: Run Tests
  - name: "python:3.12"
    id: "run-tests"
    entrypoint: "sh"
    args:
      - "-c"
      - |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        echo "Running tests..."
        python -m pytest tests/ || exit 1  # Stop build if tests fail

  # Step 2: Build the Training Docker Image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build Training Image'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/$PROJECT_ID/training-image'
      - '-f'
      - 'Dockerfile-training'
      - '.'

  # Step 3: Push Training Image to Google Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push Training Image'
    args:
      - 'push'
      - 'gcr.io/$PROJECT_ID/training-image'

  # Step 4: Create or Update Cloud Run Job
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Update Cloud Run Job'
    entrypoint: 'sh'
    args:
      - "-c"
      - |
        if gcloud run jobs describe training-job --region us-central1 > /dev/null 2>&1; then
          gcloud run jobs update training-job --image gcr.io/$PROJECT_ID/training-image --region us-central1
        else
          gcloud run jobs create training-job --image gcr.io/$PROJECT_ID/training-image --region us-central1 --task-timeout 1800s --memory 2Gi --cpu 2 --max-retries 1
        fi

  # Step 5: Execute Training Job and Wait for Completion with Timeout
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Run Training Job and Wait'
    entrypoint: 'bash'
    args:
      - "-c"
      - |
        echo "Starting Cloud Run training job..."
        EXECUTION_ID=$(gcloud run jobs execute training-job --region us-central1 --format='value(metadata.name)')
        echo "Started training-job with execution ID: $EXECUTION_ID"

        START_TIME=$(date +%s)
        TIMEOUT=1800  # 30 minutes

        while true; do
          STATUS=$(gcloud run jobs executions describe $EXECUTION_ID --region us-central1 --format='value(status.state)')
          echo "Current job status: $STATUS"

          if [[ "$STATUS" == "SUCCEEDED" ]]; then
            echo "Training job completed successfully."
            exit 0
          elif [[ "$STATUS" == "FAILED" || "$STATUS" == "CANCELLED" ]]; then
            echo "Training job failed or was cancelled."
            exit 1
          fi

          CURRENT_TIME=$(date +%s)
          ELAPSED_TIME=$((CURRENT_TIME - START_TIME))

          if [[ "$ELAPSED_TIME" -ge "$TIMEOUT" ]]; then
            echo "Training job timed out after $TIMEOUT seconds."
            exit 1
          fi

          sleep 10
        done
        

  # Step 6: Build App Docker Image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build App Image'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/$PROJECT_ID/app-image'
      - '-f'
      - 'Dockerfile-app'
      - '.'

  # Step 7: Push App Image to Google Container Registry (GCR)
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push App Image to GCR'
    args:
      - 'push'
      - 'gcr.io/$PROJECT_ID/app-image'

  # Step 8: Deploy App Image to Cloud Run (Only this service runs continuously)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Deploy to Cloud Run'
    args:
      - 'run'
      - 'deploy'
      - 'my-mlflow-app'
      - '--image'
      - 'gcr.io/$PROJECT_ID/app-image'
      - '--platform'
      - 'managed'
      - '--region'
      - 'us-west1'
      - '--allow-unauthenticated'
      - '--memory'
      - '1Gi'
      - '--set-env-vars'
      - 'MODEL_TYPE=champion'

options:
  logging: CLOUD_LOGGING_ONLY
